extends ../layout

block contenido
  a(href="/agendas" class="btn btn-outline-dark") Volver
  link(rel="stylesheet" href="/css/style.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous")
  style.
    .center-text {
      text-align: center;
    }
    .status-active {
      color: green;
    }
    .status-inactive {
      color: red;
    }
    .center-buttons {
      display: flex;
      justify-content: center;
    }
  script.
    function toggleFieldVisibility() {
      const fieldId = document.getElementById('id');
      fieldId.style.display = 'none'; // Ocultar el campo
    }
  h1.center-text Editar Agenda

  form(action=`/agendas/update/${agenda.id}` method="POST" id="editar-form" class="needs-validation" novalidate)
    
    div(class="mb-3")
      label(for="id" class="form-label") 
      input(type="number" name="id" id='id' class="form-control" value=agenda.id readonly)
   
    div(class="mb-3")
      label(for="fecha_creacion" class="form-label") Fecha de Creacion:
      input(type="date" name="fecha_creacion" class="form-control" value=agenda.fecha_creacion.toISOString().split('T')[0] required)
      div(class="invalid-feedback") La fecha de inicio es obligatoria.
    
    div(class="mb-3")
      label(for="fecha_fin" class="form-label") Fecha de Finalización:
      input(type="date" name="fecha_fin" class="form-control" value=agenda.fecha_fin.toISOString().split('T')[0] required)
      div(class="invalid-feedback") La fecha finalización es obligatoria.
    
    h3 Días y Horarios
    .mb-3#dias-horarios-container
      each dia in agenda.diasDisponibles
        div(class="dia-horario")
          label(for="dia" class="form-label") Día:
          select(name="dia[]" class="form-select dia-select" required)
            each diaOption in dias || []
              option(value=diaOption.id selected=(diaOption.id == dia.dia))= diaOption.dia
          .mb-3
            label(for="hora_inicio" class="form-label") Inicia:
            input(type="time" name="hora_inicio[]" class="form-control" value=dia.hora_inicio required)
          .mb-3
            label(for="hora_fin" class="form-label") Finaliza:
            input(type="time" name="hora_fin[]" class="form-control" value=dia.hora_fin required)
    .btn-group
      button#agregar-dia-btn(type="button" class="btn btn-secondary" onclick="agregarDiaHorario()") Agregar Otro Día  
      button#cancelar-dia-btn(type="button" class="btn btn-danger" onclick="cancelarDiaHorario()" style="display: none;") Cancelar

    div(class="mb-3")
      label(for="limite_sobreturnos" class="form-label") Limite de Sobreturnos:
      input(type="number" name="limite_sobreturnos" class="form-control" value=agenda.limite_sobreturnos required)
      div(class="invalid-feedback") Limite de sobreturnos es obligatorio.

    div(class="mb-3")
      label(for="duracion_turnos" class="form-label") Duracion de Turnos (minutos):
      input(type="number" name="duracion_turnos" class="form-control" value=agenda.duracion_turnos required)
      div(class="invalid-feedback") Duracion de turnos es obligatorio.

    div(class="mb-3")
      label(for="matricula" class="form-label") N° Matricula del Profesional: #{agenda.matricula}
      select(name="matricula" class="form-select" required)
        option(value=`${agenda.matricula}`)= agenda.matricula
          each matricula in matriculas || []
            option(value=matricula.matricula)= `${matricula.matricula}, ${matricula.nombre} ${matricula.apellido}, ${matricula.nombreMat}`

    div(class="mb-3")
      label(for="sucursal" class="form-label") Sucursal: #{agenda.sucursal}
      select(name="sucursal" class="form-select" required)
          option(value=`${agenda.id_sucursal}`)= agenda.sucursal
          option(value="1") Clinica Argentina, San Luis
          option(value="2") Clinica España, Juana Koslay
    
    div(class="mb-3")
      label(for="clasificacion" class="form-label") Clasificación: #{agenda.clasificacion}
      select(name="clasificacion" class="form-select" required)
          option(value=`${agenda.id_clasificacion}`)= agenda.clasificacion
          option(value="1") Normal
          option(value="2") Especial
          option(value="3") VIP

    button(type="submit" class="btn btn-success center-buttons") Guardar Cambios

  script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous")
  script(src="/js/medicos.js")
  script.
    // Llamar a la función para ocultar el campo cuando la página se carga
    document.addEventListener('DOMContentLoaded', toggleFieldVisibility);

    const diasSeleccionados = new Set();
    const combinacionesSeleccionadas = new Set();

    function agregarDiaHorario() {
        const container = document.getElementById('dias-horarios-container');
        const diaSelects = document.querySelectorAll('.dia-select');
        const nuevoDiaSelect = diaSelects[0].cloneNode(true);
        nuevoDiaSelect.value = "";

        const nuevoDiaHorario = document.createElement('div');
        nuevoDiaHorario.classList.add('dia-horario');
        nuevoDiaHorario.innerHTML = `
            <label for="dia" class="form-label">Día:</label>
            ${nuevoDiaSelect.outerHTML}
            <div class="mb-3">
                <label for="hora_inicio" class="form-label">Hora Inicio:</label>
                <input type="time" name="hora_inicio[]" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="hora_fin" class="form-label">Hora Fin:</label>
                <input type="time" name="hora_fin[]" class="form-control" required>
            </div>
        `;
        container.appendChild(nuevoDiaHorario);

        nuevoDiaSelect.addEventListener('change', function() {
            diasSeleccionados.add(this.value);
        });

        // Añadir eventos de cambio a los nuevos campos de hora
        nuevoDiaHorario.querySelectorAll('input[type="time"]').forEach(input => {
            input.addEventListener('change', verificarCampos);
        });

        // Mostrar el botón de cancelar
        document.getElementById('cancelar-dia-btn').style.display = 'inline-block';

        // Verificar si se han seleccionado todos los días, horas de inicio y fin
        verificarCampos();
    }

    function cancelarDiaHorario() {
        const container = document.getElementById('dias-horarios-container');
        const diaHorarios = container.querySelectorAll('.dia-horario');
        if (diaHorarios.length > 1) {
            container.removeChild(diaHorarios[diaHorarios.length - 1]);
        }
        document.getElementById('cancelar-dia-btn').style.display = 'none';
        verificarCampos();
    }

    function verificarCampos() {
        const diaSelects = document.querySelectorAll('.dia-select');
        const horaInicios = document.querySelectorAll('input[name="hora_inicio[]"]');
        const horaFins = document.querySelectorAll('input[name="hora_fin[]"]');
        let camposCompletos = true;

        diaSelects.forEach((select, index) => {
            const dia = select.value;
            const horaInicio = horaInicios[index].value;
            const horaFin = horaFins[index].value;

            if (dia === "" || horaInicio === "" || horaFin === "") {
                camposCompletos = false;
            } else {
                const combinacion = `${dia}-${horaInicio}-${horaFin}`;
                combinacionesSeleccionadas.add(combinacion);
            }
        });

        document.getElementById('agregar-dia-btn').disabled = !camposCompletos;
    }

    function validarFormulario() {
        const fechaCreacion = document.getElementById('fecha_creacion').value;
        const fechaFin = document.getElementById('fecha_fin').value;
        const duracionTurnos = document.getElementById('duracion_turnos').value;
        const fechaActual = new Date().toISOString().split('T')[0];

        if (fechaCreacion === fechaFin) {
            Swal.fire({
                title: 'Error',
                text: 'La fecha de creación y la fecha de fin no pueden ser iguales.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return false;
        }

        if (new Date(fechaFin) < new Date(fechaCreacion)) {
            Swal.fire({
                title: 'Error',
                text: 'La fecha de fin no puede ser menor a la fecha de creación.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return false;
        }

        if (new Date(fechaCreacion) < new Date(fechaActual)) {
            Swal.fire({
                title: 'Error',
                text: 'La fecha de creación no puede ser menor a la fecha actual.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return false;
        }

        if (duracionTurnos <= 10) {
            Swal.fire({
                title: 'Error',
                text: 'La duración de los turnos debe ser mayor a 10 minutos.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return false;
        }

        return true;
    }

    document.querySelectorAll('.dia-select, input[name="hora_inicio[]"], input[name="hora_fin[]"]').forEach(element => {
        element.addEventListener('change', verificarCampos);
    });

    document.querySelectorAll('.dia-select').forEach(select => {
        select.addEventListener('change', function() {
            diasSeleccionados.add(this.value);
        });
    });
